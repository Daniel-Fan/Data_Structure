#include<stdio.h>
struct node{
	int l,r,max;
}tree[800005];
int a[200005],ans;
void build(int l,int r,int root){
	tree[root].l=l;
	tree[root].r=r;
	if(l==r){
		tree[root].max=a[l];
		return ;
	}
	int mid=(l+r)>>1;
	build(l,mid,root<<1);
	build(mid+1,r,root<<1|1);
	if(tree[root<<1].max>tree[root<<1|1].max)tree[root].max=tree[root<<1].max;
	else tree[root].max=tree[root<<1|1].max;
}
void update(int x,int y,int root){
	if(tree[root].l==tree[root].r){
		tree[root].max=y;
		return ;
	}
	int mid=tree[root].l+tree[root].r>>1;
	if(x<=mid)update(x,y,root<<1);
	else update(x,y,root<<1|1);
	if(tree[root<<1].max>tree[root<<1|1].max)tree[root].max=tree[root<<1].max;
	else tree[root].max=tree[root<<1|1].max;
}
void query(int x,int y,int root){
	if(tree[root].l>=x&&tree[root].r<=y){
		if(tree[root].max>ans)ans=tree[root].max;
		return ;
	}
	int mid=tree[root].l+tree[root].r>>1;
	if(y<=mid)query(x,y,root<<1);
	else if(x>mid)query(x,y,root<<1|1);
	else{
		query(x,y,root<<1);
		query(x,y,root<<1|1);
	}
}
int main(){
	int n,t,m,i,x,y,z;
	char s[3];
	while(scanf("%d%d",&n,&m)!=EOF){
		for(i=1;i<=n;i++)scanf("%d",&a[i]);
		build(1,n,1);
		for(i=1;i<=m;i++){
			scanf("%s%d%d",s,&x,&y);
			if(s[0]=='U'){
				update(x,y,1);
			}
			else{
				ans=0;
				query(x,y,1);
				printf("%d\n",ans);
			}
		}
	}
	return 0;
}